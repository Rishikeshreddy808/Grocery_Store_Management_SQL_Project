-- create database

create database grocery;

-- to select paticular database
use grocery;

-- suppliers table
drop table supplier;
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);
SELECT * FROM supplier;

-- categories table
CREATE TABLE IF NOT EXISTS categories (
    categoryid TINYINT PRIMARY KEY,
    categoryname VARCHAR(255)
);
SELECT * FROM categories;

-- customers table
CREATE TABLE IF NOT EXISTS customers (
    customerid SMALLINT PRIMARY KEY,
    customername VARCHAR(255),
    address TEXT
);
-- orderdetails table
CREATE TABLE IF NOT EXISTS order_details (
    orderdetailid SMALLINT AUTO_INCREMENT PRIMARY KEY,
    orderid SMALLINT,
    productid TINYINT,
    quantity TINYINT,
    priceeach DECIMAL(10,2),
    totalprice DECIMAL(10,2),
    FOREIGN KEY (orderid) REFERENCES orders(orderid)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (productid) REFERENCES products(productid)
        ON UPDATE CASCADE ON DELETE CASCADE
);


select * from order_details;



-- orders table
CREATE TABLE IF NOT EXISTS orders (
    orderid SMALLINT PRIMARY KEY,
    customerid SMALLINT,
    employeeid TINYINT,
    orderdate VARCHAR(255),
    FOREIGN KEY (customerid) REFERENCES customers(customerid)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (employeeid) REFERENCES employees(employeeid)
        ON UPDATE CASCADE ON DELETE CASCADE
);
select * from orders;


-- products table 
CREATE TABLE IF NOT EXISTS products (
    productid TINYINT PRIMARY KEY,
    name VARCHAR(255),
    supplierid TINYINT,
    categoryid TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (supplierid) REFERENCES supplier(supplierid)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (categoryid) REFERENCES categories(categoryid)
        ON UPDATE CASCADE ON DELETE CASCADE
);

select * from products;
-- store_employees table
CREATE TABLE IF NOT EXISTS employees (
    employeeid TINYINT PRIMARY KEY,
    name VARCHAR(255),
    hiredate VARCHAR(255)
);
select *from customers;
-- .customers insights
-- 1.How many unique customers have placed orders?
SELECT COUNT(DISTINCT customerid) AS unique_customers
FROM orders;



-- 2.Which customers have placed the highest number of orders?
select c.customerid,c.name,count(o.orderid) as orders_count
from customers c
join orders o on c.customerid = o.customerid
group by c.customerid,c.name
order by orders_count desc;

-- 3.What is the total and average purchase value per customer?
SELECT 
    c.customerid,
    c.name,
    SUM(od.totalprice) AS total_purchase_value,
    AVG(od.totalprice) AS average_purchase_value
FROM customers c
JOIN orders o 
    ON c.customerid = o.customerid
JOIN orderdetails od 
    ON o.orderid = od.orderid
GROUP BY c.customerid, c.name
ORDER BY total_purchase_value DESC;

-- -- 4.Who are the top 5 customers by total purchase amount?
select c.customerid,c.name,sum(od.totalprice) as total_spent
from customers c
join orders o on c.customerid = o.customerid
join orderdetails od on o.orderid = od.orderid
group by c.customerid,c.name
order by total_spent desc
limit 5;

-- Product Performance
-- 5.How many products exist in each category?
select cat.categoryname,count(p.productid) as product_count
from categories cat
left join products p on cat.categoryid = p.categoryid
group by cat.categoryname;

-- 6.What is the average price of products by category?
select cat.categoryname,avg(p.price) as avg_price
from categories cat
join products p on cat.categoryid = p.categoryid
group by cat.categoryname;

-- 7.Which products have the highest total sales volume (by quantity)
select p.name,sum(od.quantity) as total_qty
from products p
join orderdetails od on p.productid = od.productid
group by p.name
order by total_qty desc;

-- 8.What is the total revenue generated by each product?
select p.name,sum(od.totalprice) as revune
from products p
join orderdetails od on p.productid = od.productid
group by p.name
order by revune desc;

-- 9.How do product sales vary by category and supplier
select c.categoryname,s.suppliername,
sum(od.quantity) as qty_sold,
sum(od.totalprice) as total_revune
from products p
join categories c on p.categoryid = c.categoryid
join suppliers s on p.supplierid = s.supplierid
join orderdetails od on p.productid = od.productid
group by c.categoryname, s.suppliername
order by total_revune desc;

-- Sales and Order Trends
-- 10.Total number of orders
SELECT COUNT(*) AS TotalOrders
FROM Orders;

-- 11.Average value per order
SHOW COLUMNS FROM orderdetails;

SELECT AVG(OrderTotal) AS AvgOrderValue
FROM (
    SELECT orderid, SUM(totalprice) AS OrderTotal
    FROM orderdetails
    GROUP BY orderid)
    AS OrderValues;

-- 12.Dates with most orders placed
SELECT orderdate, COUNT(*) AS TotalOrders
FROM orders
GROUP BY orderdate
ORDER BY TotalOrders DESC;
-- 13.Monthly trends in order volume and revenue
SELECT left(o.orderdate,7) as orderMonth,
       COUNT(DISTINCT o.orderid) AS order_volume,
       SUM(od.quantity * od.priceeach) AS TotalRevenue
FROM orders o
JOIN orderdetails od ON o.orderid = od.orderid
GROUP BY orderMonth
ORDER BY orderMonth;

-- 14.Order patterns across weekdays vs weekends
SELECT 
    CASE 
        WHEN DAYOFWEEK(STR_TO_DATE(orderdate, '%Y-%m-%d')) IN (1,7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS DayType,
    COUNT(*) AS TotalOrders
FROM orders
GROUP BY DayType;

-- Supplier Contribution
-- 15.Total number of suppliers
SELECT COUNT(*) AS TotalSuppliers
FROM suppliers;

-- 16.Supplier providing the most products
SELECT s.supplierid, s.suppliername, COUNT(p.productid) AS ProductCount
FROM suppliers s
JOIN products p ON s.supplierid = p.supplierid
GROUP BY s.supplierid, s.suppliername
ORDER BY ProductCount DESC
LIMIT 1;

-- -- 17.Average price of products from each supplier
SELECT s.supplierid, s.suppliername, AVG(p.price) AS AvgProductPrice
FROM suppliers s
JOIN products p ON s.supplierid = p.supplierid
GROUP BY s.supplierid, s.suppliername
ORDER BY AvgProductPrice DESC;

-- 18.Suppliers contributing the most to total sales (by revenue)
SELECT s.supplierid, s.suppliername,
       SUM(od.totalprice) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.supplierid = p.supplierid
JOIN orderdetails od ON p.productid = od.productid
GROUP BY s.supplierid, s.suppliername
ORDER BY TotalRevenue DESC;

-- Employee Performance
-- 19.Number of employees who processed orders
SELECT COUNT(DISTINCT employeeid) AS ActiveEmployees
FROM orders;

-- 20.Employees handling the most orders
SELECT e.employeeid, e.name,
       COUNT(DISTINCT o.orderid) AS OrdersHandled
FROM store_employees e
JOIN orders o ON e.employeeid = o.employeeid
GROUP BY e.employeeid, e.name
ORDER BY OrdersHandled DESC;

-- 21.Total sales value processed by each employee
SELECT e.employeeid, e.name,
       SUM(od.totalprice) AS TotalSales
FROM store_employees e
JOIN orders o ON e.employeeid = o.employeeid
JOIN orderdetails od ON o.orderid = od.orderid
GROUP BY e.employeeid, e.name
ORDER BY TotalSales DESC;

-- 22.Average order value handled per employee
SELECT e.employeeid, e.name,
       AVG(OrderValue) AS AvgOrderValue
FROM store_employees e
JOIN orders o ON e.employeeid = o.employeeid
JOIN (
    SELECT orderid, SUM(totalprice) AS OrderValue
    FROM orderdetails
    GROUP BY orderid
) AS OrderVals ON o.orderid = OrderVals.orderid
GROUP BY e.employeeid, e.name
ORDER BY AvgOrderValue DESC;

-- Order Details Deep Dive
-- 23.Relationship between quantity ordered and total price
SELECT quantity, totalprice
FROM orderdetails;		

-- 24.Average quantity ordered per product
SELECT p.productid, p.name, AVG(od.quantity) AS AvgQuantity
FROM products p
JOIN orderdetails od ON p.productid = od.productid
GROUP BY p.productid, p.name
ORDER BY AvgQuantity DESC;

-- 25.Variation in unit price (each_price) across products and orders
SELECT p.productid, p.name, od.eachprice
FROM products p
JOIN orderdetails od ON p.productid = od.productid
ORDER BY p.name,Â od.eachprice;















